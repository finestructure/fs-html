public extension Node {
{% for enum in types.implementing.AttributesNodes|enum %}

    {% for case in enum.cases %}
    // {{case.name}}

    public static func {{case.name}}(_ text: String) -> Node {
        return {{case.name}}([], .text(text))
    }

    public static func {{case.name}}(_ node: Node) -> Node {
        return {{case.name}}([], node)
    }

    public static func {{case.name}}(_ children: [Node]) -> Node {
        return {{case.name}}([], children)
    }

    public static func {{case.name}}(_ attrs: [Attribute], _ node: Node) -> Node {
        return {{case.name}}(attrs, [node])
    }

    public static func {{case.name}}(_ attrs: [Attribute], _ children: [Node]) -> Node {
        return .el("{{case.name}}", attrs, children)
    }

    {% endfor %}
{% endfor %}
}


public extension Node {
{% for enum in types.implementing.NoParameters|enum %}

    {% for case in enum.cases %}
    // {{case.name}}

    public static var {{case.name}}: Node {
        return .el("{{case.name}}", [], [])
    }

    {% endfor %}
{% endfor %}
}


public extension Node {
{% for enum in types.implementing.AttributesOnly|enum %}

    {% for case in enum.cases %}
    // {{case.name}}

    public static func {{case.name}}(_ attr: Attribute) -> Node {
        return {{case.name}}([attr])
    }

    public static func {{case.name}}(_ attrs: [Attribute]) -> Node {
        return .el("{{case.name}}", attrs, [])
    }

    {% endfor %}
{% endfor %}
}
